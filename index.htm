<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QR Code Generator</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.7.1/jszip.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip-utils/0.1.0/jszip-utils.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/qrcode/build/qrcode.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
</head>
<body class="bg-light">
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-8 text-center">
                <h1 class="mb-4">QR Code Generator</h1>
                <div class="card p-3 mb-3 bg-secondary text-white">
                    <label for="fileInput" class="form-label">Select CSV or XLSX</label>
                    <input type="file" id="fileInput" class="form-control mb-3" accept=".xlsx, .csv">
                    <label for="columnSelect" class="form-label">Select column</label>
                    <select id="columnSelect" class="form-select mb-3">
                        <option value="" disabled selected>Please select a file</option>
                    </select>
                </div>
                <p>or paste directly</p>
                <textarea id="inputText" class="form-control mb-3" rows="10" placeholder="One QR code per line..."></textarea>
                <div class="mb-3 d-flex justify-content-center align-items-center">
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="formatRadio" id="formatPNG" value="png" checked>
                        <label class="form-check-label" for="formatPNG">PNG</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="formatRadio" id="formatSVG" value="svg">
                        <label class="form-check-label" for="formatSVG">SVG</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="formatRadio" id="formatPDF" value="pdf">
                        <label class="form-check-label" for="formatPDF">PDF</label>
                    </div>
                </div>
                
                <button class="btn btn-primary mb-3" onclick="generateQRCodes()">Generate and Download QR Codes</button>
                <div id="statusContainer" class="mt-3" style="display: none;">
                    <div id="statusMessage" class="alert alert-info" role="alert">
                        <span id="statusText"></span>
                        <span id="loadingSpinner" class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- GitHub Link - Bottom Right -->
    <div style="position: fixed; bottom: 20px; right: 20px; z-index: 1000;">
        <a href="https://github.com/paulrennecke/qr-bulk" target="_blank" class="text-decoration-none" style="color: #24292e;">
            <svg width="24" height="24" fill="currentColor" viewBox="0 0 16 16">
                <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z"/>
            </svg>
        </a>
    </div>
    
    <script>
        async function generateQRCodes() {
            const text = document.getElementById('inputText').value;
            const lines = text.split('\n').filter(line => line.trim() !== '');
            const statusContainer = document.getElementById('statusContainer');
            const statusText = document.getElementById('statusText');
            const loadingSpinner = document.getElementById('loadingSpinner');

            function sanitizeFilename(name) {
                return name.replace(/[\\/:*?"<>|]/g, '_');
            }

            const formatRadios = document.getElementsByName('formatRadio');
            let selectedFormat = 'png';
            for (const radio of formatRadios) {
                if (radio.checked) {
                    selectedFormat = radio.value;
                    break;
                }
            }
            const fileExtension = `.${selectedFormat}`;

            statusContainer.style.display = 'block';
            statusText.innerText = 'Creating QR codes';
            loadingSpinner.style.display = 'inline-block';

            if (lines.length === 1) {
                const line = lines[0];
                const safeName = sanitizeFilename(line.trim());
                if (selectedFormat === 'svg') {
                    let svgString = '';
                    await QRCode.toString(line.trim(), {
                        type: 'svg',
                        errorCorrectionLevel: 'H'
                    }).then(string => {
                        svgString = string;
                    });
                    const blob = new Blob([svgString], { type: 'image/svg+xml' });
                    const link = document.createElement('a');
                    link.href = URL.createObjectURL(blob);
                    link.download = `${safeName}${fileExtension}`;
                    link.click();
                } else if (selectedFormat === 'pdf') {
                    const { jsPDF } = window.jspdf;
                    const doc = new jsPDF({
                        orientation: "portrait",
                        unit: "mm",
                        format: [100, 100]
                    });
                    const qrCodeDataUrl = await QRCode.toDataURL(line.trim(), {
                        errorCorrectionLevel: 'H',
                        margin: 1,
                        width: 80
                    });
                    doc.addImage(qrCodeDataUrl, 'PNG', 10, 10, 80, 80);
                    const pdfBlob = doc.output('blob');
                    const link = document.createElement('a');
                    link.href = URL.createObjectURL(pdfBlob);
                    link.download = `${safeName}${fileExtension}`;
                    link.click();
                } else {
                    const qrCodeDataUrl = await QRCode.toDataURL(line.trim());
                    const link = document.createElement('a');
                    link.href = qrCodeDataUrl;
                    link.download = `${safeName}${fileExtension}`;
                    link.click();
                }
                statusText.innerText = 'Successfully created!';
                loadingSpinner.style.display = 'none';
                setTimeout(() => {
                    statusContainer.style.display = 'none';
                }, 3000);
                return;
            }

            const zip = new JSZip();
            for (let i = 0; i < lines.length; i++) {
                const line = lines[i];
                const safeName = sanitizeFilename(line.trim());
                if (selectedFormat === 'svg') {
                    let svgString = '';
                    await QRCode.toString(line.trim(), {
                        type: 'svg',
                        errorCorrectionLevel: 'H'
                    }).then(string => {
                        svgString = string;
                    });
                    zip.file(`${safeName}${fileExtension}`, svgString);
                } else if (selectedFormat === 'pdf') {
                    const { jsPDF } = window.jspdf;
                    const doc = new jsPDF({
                        orientation: "portrait",
                        unit: "mm",
                        format: [100, 100]
                    });
                    const qrCodeDataUrl = await QRCode.toDataURL(line.trim(), {
                        errorCorrectionLevel: 'H',
                        margin: 1,
                        width: 80
                    });
                    doc.addImage(qrCodeDataUrl, 'PNG', 10, 10, 80, 80);
                    const pdfBlob = doc.output('blob');
                    const reader = new FileReader();
                    await new Promise((resolve) => {
                        reader.onload = function() {
                            const arrayBuffer = reader.result;
                            zip.file(`${safeName}${fileExtension}`, arrayBuffer);
                            resolve();
                        };
                        reader.readAsArrayBuffer(pdfBlob);
                    });
                } else {
                    const qrCodeDataUrl = await QRCode.toDataURL(line.trim());
                    const imgData = qrCodeDataUrl.split(',')[1];
                    zip.file(`${safeName}${fileExtension}`, imgData, { base64: true });
                }
            }

            statusText.innerText = 'Creating ZIP...';

            zip.generateAsync({ type: 'blob' }).then(function (content) {
                const link = document.createElement('a');
                link.href = URL.createObjectURL(content);
                link.download = 'qrcodes.zip';
                link.click();

                statusText.innerText = 'Successfully created!';
                loadingSpinner.style.display = 'none';
                setTimeout(() => {
                    statusContainer.style.display = 'none';
                }, 3000);
            });
        }

        document.getElementById('fileInput').addEventListener('change', function(event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const data = new Uint8Array(e.target.result);
                    let sheetData;
                    if (file.name.endsWith('.xlsx')) {
                        const workbook = XLSX.read(data, { type: 'array' });
                        const firstSheet = workbook.Sheets[workbook.SheetNames[0]];
                        sheetData = XLSX.utils.sheet_to_json(firstSheet, { header: 1 });
                    } else if (file.name.endsWith('.csv')) {
                        const text = new TextDecoder().decode(data);
                        sheetData = text.split('\n').map(row => row.split(','));
                    }

                    const columnSelect = document.getElementById('columnSelect');
                    columnSelect.innerHTML = '';
                    sheetData[0].forEach((_, index) => {
                        const option = document.createElement('option');
                        option.value = index;
                        option.text = `Column ${index}`;
                        columnSelect.appendChild(option);
                    });

                    columnSelect.addEventListener('change', function() {
                        const column = columnSelect.value;
                        const textArea = document.getElementById('inputText');
                        textArea.value = sheetData.map(row => row[column]).join('\n');
                    });

                    columnSelect.value = 0;
                    const event = new Event('change');
                    columnSelect.dispatchEvent(event);
                };
                reader.readAsArrayBuffer(file);
            }
        });
    </script>
</body>
</html>