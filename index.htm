<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QR Code Generator</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.7.1/jszip.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip-utils/0.1.0/jszip-utils.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/qrcode/build/qrcode.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
</head>
<body class="bg-light">
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-8 text-center">
                <h1 class="mb-4">QR Code Generator</h1>
                <div class="card p-3 mb-3 bg-secondary text-white">
                    <label for="fileInput" class="form-label">CSV oder XLSX auswählen</label>
                    <input type="file" id="fileInput" class="form-control mb-3" accept=".xlsx, .csv">
                    <label for="columnSelect" class="form-label">Spalte auswählen</label>
                    <select id="columnSelect" class="form-select mb-3">
                        <option value="" disabled selected>Bitte Datei auswählen</option>
                    </select>
                </div>
                <p>oder direkt einfügen</p>
                <textarea id="inputText" class="form-control mb-3" rows="10" placeholder="Einen QR-Code pro Zeile..."></textarea>
                <div class="mb-3 d-flex justify-content-center align-items-center">
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="formatRadio" id="formatPNG" value="png" checked>
                        <label class="form-check-label" for="formatPNG">PNG</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="formatRadio" id="formatSVG" value="svg">
                        <label class="form-check-label" for="formatSVG">SVG</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="formatRadio" id="formatPDF" value="pdf">
                        <label class="form-check-label" for="formatPDF">PDF</label>
                    </div>
                </div>
                
                <button class="btn btn-primary mb-3" onclick="generateQRCodes()">QR Codes generieren und herunterladen</button>
                <div id="statusContainer" class="mt-3" style="display: none;">
                    <div id="statusMessage" class="alert alert-info" role="alert">
                        <span id="statusText"></span>
                        <span id="loadingSpinner" class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
        async function generateQRCodes() {
            const text = document.getElementById('inputText').value;
            const lines = text.split('\n');
            const zip = new JSZip();
            const statusContainer = document.getElementById('statusContainer');
            const statusText = document.getElementById('statusText');
            const loadingSpinner = document.getElementById('loadingSpinner');
            
            // Get selected format
            const formatRadios = document.getElementsByName('formatRadio');
            let selectedFormat = 'png'; // Default
            for (const radio of formatRadios) {
                if (radio.checked) {
                    selectedFormat = radio.value;
                    break;
                }
            }
            const fileExtension = `.${selectedFormat}`;

            statusContainer.style.display = 'block';
            statusText.innerText = 'QR Codes werden erstellt';
            loadingSpinner.style.display = 'inline-block';

            for (let i = 0; i < lines.length; i++) {
                const line = lines[i];
                if (line.trim() !== '') {
                    if (selectedFormat === 'svg') {
                        // SVG Format
                        let svgString = '';
                        await QRCode.toString(line.trim(), {
                            type: 'svg',
                            errorCorrectionLevel: 'H'
                        }).then(string => {
                            svgString = string;
                        });
                        zip.file(`${line.trim()}${fileExtension}`, svgString);
                    } else if (selectedFormat === 'pdf') {
                        // PDF Format mit jsPDF erstellen
                        const { jsPDF } = window.jspdf;
                        const doc = new jsPDF({
                            orientation: "portrait",
                            unit: "mm",
                            format: [100, 100]
                        });
                        
                        // QR Code als DataURL erstellen
                        const qrCodeDataUrl = await QRCode.toDataURL(line.trim(), {
                            errorCorrectionLevel: 'H',
                            margin: 1,
                            width: 80
                        });
                        
                        // QR-Code in PDF einfügen
                        doc.addImage(qrCodeDataUrl, 'PNG', 10, 10, 80, 80);
                        
                        // Text unter dem QR-Code hinzufügen
                        //doc.setFontSize(10);
                        //doc.text(line.trim(), 50, 95, { align: 'center' });
                        
                        // PDF als Blob holen und in ZIP speichern
                        const pdfBlob = doc.output('blob');
                        const reader = new FileReader();
                        
                        // Promise für asynchrones Konvertieren
                        await new Promise((resolve) => {
                            reader.onload = function() {
                                const arrayBuffer = reader.result;
                                zip.file(`${line.trim()}${fileExtension}`, arrayBuffer);
                                resolve();
                            };
                            reader.readAsArrayBuffer(pdfBlob);
                        });
                    } else {
                        // PNG Format (default)
                        const qrCodeDataUrl = await QRCode.toDataURL(line.trim());
                        const imgData = qrCodeDataUrl.split(',')[1];
                        zip.file(`${line.trim()}${fileExtension}`, imgData, { base64: true });
                    }
                }
            }

            statusText.innerText = 'ZIP wird erstellt...';

            zip.generateAsync({ type: 'blob' }).then(function (content) {
                const link = document.createElement('a');
                link.href = URL.createObjectURL(content);
                link.download = 'qrcodes.zip';
                link.click();

                statusText.innerText = 'Erfolgreich erstellt!';
                loadingSpinner.style.display = 'none';
                setTimeout(() => {
                    statusContainer.style.display = 'none';
                }, 3000);
            });
        }

        document.getElementById('fileInput').addEventListener('change', function(event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const data = new Uint8Array(e.target.result);
                    let sheetData;
                    if (file.name.endsWith('.xlsx')) {
                        const workbook = XLSX.read(data, { type: 'array' });
                        const firstSheet = workbook.Sheets[workbook.SheetNames[0]];
                        sheetData = XLSX.utils.sheet_to_json(firstSheet, { header: 1 });
                    } else if (file.name.endsWith('.csv')) {
                        const text = new TextDecoder().decode(data);
                        sheetData = text.split('\n').map(row => row.split(','));
                    }

                    const columnSelect = document.getElementById('columnSelect');
                    columnSelect.innerHTML = '';
                    sheetData[0].forEach((_, index) => {
                        const option = document.createElement('option');
                        option.value = index;
                        option.text = `Spalte ${index}`;
                        columnSelect.appendChild(option);
                    });

                    columnSelect.addEventListener('change', function() {
                        const column = columnSelect.value;
                        const textArea = document.getElementById('inputText');
                        textArea.value = sheetData.map(row => row[column]).join('\n');
                    });

                    columnSelect.value = 0;
                    const event = new Event('change');
                    columnSelect.dispatchEvent(event);
                };
                reader.readAsArrayBuffer(file);
            }
        });
    </script>
</body>
</html>